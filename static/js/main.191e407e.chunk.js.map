{"version":3,"sources":["assets/images/sun.png","assets/images/water-drop.png","assets/images/fertilizer.png","assets/images/garden0.jpg","components/Jumbotron/Jumbotron.module.css","logo.svg","components/NavBar/NavBar.js","components/Jumbotron/Jumbotron.js","components/Garden/Garden.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","navBar","props","className","Jumbotron","chartRef","React","createRef","myChartRef","this","current","getContext","Chart","type","data","labels","datasets","label","data0","lightReading","data1","data2","data3","data4","fill","borderColor","moistureReading","tempReading","options","classes","graphContainer","id","ref","Component","cardL","src","projectImage","title","description","date0","sunImg","moistureReading0","waterImg","tempReading0","fertImage","lightReading0","date1","moistureReading1","tempReading1","lightReading1","date2","moistureReading2","tempReading2","lightReading2","date3","moistureReading3","tempReading3","lightReading3","date4","moistureReading4","tempReading4","lightReading4","App","plotImage","time","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.191e407e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sun.e145e988.png\";","module.exports = __webpack_public_path__ + \"static/media/water-drop.aef2215c.png\";","module.exports = __webpack_public_path__ + \"static/media/fertilizer.23dd21ec.png\";","module.exports = __webpack_public_path__ + \"static/media/garden0.100e6e59.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"jumbotron\":\"Jumbotron_jumbotron__2YLAy\",\"jumbotronContent\":\"Jumbotron_jumbotronContent__1CVOB\",\"graphContainer\":\"Jumbotron_graphContainer__3svsf\"};","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport './NavBar.css';\n\nconst navBar = (props) => {\n  return (\n    <div className = \"navBar\">\n      <h1>\n        Garden Of Things\n      </h1>\n    </div>\n  )\n}\n\nexport default navBar;\n","import React, { Component } from 'react'\nimport Chart from \"chart.js\";\nimport classes from \"./Jumbotron.module.css\";\n\nimport data0 from \"../../assets/data0.json\";\nimport data1 from \"../../assets/data1.json\";\nimport data2 from \"../../assets/data2.json\";\nimport data3 from \"../../assets/data3.json\";\nimport data4 from \"../../assets/data4.json\";\n\nexport default class Jumbotron extends Component {\n    chartRef = React.createRef();\n\n    componentDidMount() {\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n        new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n                labels: [\"12-01\",\"12-02\",\"12-03\", \"12-04\", \"Today\"],\n                datasets: [\n                    {\n                        label: \"Sunlight\",\n                        data: [data0.lightReading, data1.lightReading, data2.lightReading,data3.lightReading,data4.lightReading],\n                        fill: false,\n                        borderColor: \"#fada62\"\n\n                    },\n                    {\n                        label: \"Soil Moisture\",\n                        data: [data0.moistureReading,data1.moistureReading,data2.moistureReading,data3.moistureReading,data4.moistureReading,],\n                        fill: false,\n                        borderColor: \"#8decf5\"\n                    },\n                    {\n                        label: \"Temperature\",\n                        data: [data0.tempReading, data1.tempReading, data2.tempReading, data3.tempReading, data4.tempReading,],\n                        fill: false,\n                        borderColor: \"#a1db6a\"\n                    }\n                ]\n            },\n            options: {\n                //Customize chart options\n            }\n        });\n    }\n    render() {\n        return (\n          <section className=\"jumbotron\">\n\n            <div className={classes.graphContainer}>\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n          </section>\n        )\n    }\n}\n","import React from 'react';\nimport './Garden.css';\nimport sunImg from '../../assets/images/sun.png'\nimport waterImg from '../../assets/images/water-drop.png'\nimport fertImage from '../../assets/images/fertilizer.png'\n\nconst cardL = (props) => {\n  return (\n    <section className = 'cardLayoutL'>\n      <div className = 'imageL'>\n        <img src={props.projectImage}/>\n      </div>\n      <div className = 'contentL'>\n        <h4>{props.title}</h4>\n        <p className=\"split\">{props.description}</p>\n      </div>\n\n      <div className=\"pastDays0\">\n\n        <h4>{props.date0}</h4>\n        <p>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={sunImg}/><p className=\"alignText\">{props.moistureReading0}</p></p>\n          <div className = \"clear\"> </div>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={waterImg}/><p className=\"alignText\">{props.tempReading0}</p></p>\n          <div className = \"clear\"> </div>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={fertImage}/><p className=\"alignText\">{props.lightReading0}</p></p>\n        </p>\n\n      </div>\n\n      <div className=\"pastDays0\">\n\n        <h4>{props.date1}</h4>\n        <p>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={sunImg}/><p className=\"alignText\">{props.moistureReading1}</p></p>\n          <div className = \"clear\"> </div>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={waterImg}/><p className=\"alignText\">{props.tempReading1}</p></p>\n          <div className = \"clear\"> </div>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={fertImage}/><p className=\"alignText\">{props.lightReading1}</p></p>\n        </p>\n\n      </div>\n\n      <div className=\"pastDays0\">\n\n        <h4>{props.date2}</h4>\n        <p>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={sunImg}/><p className=\"alignText\">{props.moistureReading2}</p></p>\n          <div className = \"clear\"> </div>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={waterImg}/><p className=\"alignText\">{props.tempReading2}</p></p>\n          <div className = \"clear\"> </div>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={fertImage}/><p className=\"alignText\">{props.lightReading2}</p></p>\n        </p>\n\n      </div>\n\n      <div className=\"pastDays0\">\n\n        <h4>{props.date3}</h4>\n        <p>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={sunImg}/><p className=\"alignText\">{props.moistureReading3}</p></p>\n          <div className = \"clear\"> </div>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={waterImg}/><p className=\"alignText\">{props.tempReading3}</p></p>\n          <div className = \"clear\"> </div>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={fertImage}/><p className=\"alignText\">{props.lightReading3}</p></p>\n        </p>\n\n      </div>\n\n      <div className=\"pastDays0\">\n\n        <h4>{props.date4}</h4>\n        <p>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={sunImg}/><p className=\"alignText\">{props.moistureReading4}</p></p>\n          <div className = \"clear\"> </div>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={waterImg}/><p className=\"alignText\">{props.tempReading4}</p></p>\n          <div className = \"clear\"> </div>\n          <p className=\"floatLeft\"><img className=\"smallImg\"src={fertImage}/><p className=\"alignText\">{props.lightReading4}</p></p>\n        </p>\n\n      </div>\n\n\n    </section>\n  )\n}\n\nexport default cardL;\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport Chart from 'chart.js';\nimport './App.css';\nimport './reset.css';\n\nimport plotImage from './assets/images/garden0.jpg'\nimport data0 from \"./assets/data0.json\";\nimport data1 from \"./assets/data1.json\";\nimport data2 from \"./assets/data2.json\";\nimport data3 from \"./assets/data3.json\";\nimport data4 from \"./assets/data4.json\";\n\nimport NavBar from './components/NavBar/NavBar.js'\n\nimport Jumbotron from './components/Jumbotron/Jumbotron.js'\nimport Garden from './components/Garden/Garden.js'\n\n\n\nclass App extends Component{\n\n\n\n    render() {\n      return(\n        <>\n        <NavBar />\n        <Garden\n          projectImage={plotImage}\n          title=\"Plot 01\"\n          date0=\"today\"\n          moistureReading0={data0.moistureReading}\n          tempReading0={data0.tempReading}\n          lightReading0={data0.lightReading}\n\n          date1={data1.time}\n          moistureReading1={data1.moistureReading}\n          tempReading1={data1.tempReading}\n          lightReading1={data1.lightReading}\n\n          date2={data2.time}\n          moistureReading2={data2.moistureReading}\n          tempReading2={data2.tempReading}\n          lightReading2={data2.lightReading}\n\n          date3={data3.time}\n          moistureReading3={data3.moistureReading}\n          tempReading3={data3.tempReading}\n          lightReading3={data3.lightReading}\n\n          date4={data4.time}\n          moistureReading4={data4.moistureReading}\n          tempReading4={data4.tempReading}\n          lightReading4={data4.lightReading}\n          description=\"Raddish and arugula garden inside of greenhouse.\"\n        />\n\n        <Jumbotron />\n\n\n        </>\n      )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}